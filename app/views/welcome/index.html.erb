<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
  </head>
  <body>
    <h1>helelo</h1>
    <div id="game-container"></div>
    <script type="text/javascript">
      let config = {
          type: Phaser.AUTO,
          width: 1200,
          height: 800,
          parent: "game-container",
          physics: {
        default: 'arcade',
        arcade: {
            gravity: {
                y: 0
            },
        }
          },
          scene: {
        preload: preload,
        create: create,
        update: update
          },
      };
      
      let game = new Phaser.Game(config);
      
      function preload() {
      
          this.load.image('bomb', 'assets/bomb.png');
          this.load.spritesheet('dude', 'assets/dude.png', {
        frameWidth: 32,
        frameHeight: 32
          });
          //     this.load.tilemapTiledJSON('map', 'assets/test.json');
          //     this.load.image('tiles', 'assets/tmw_desert_spacing.png');
          // this.load.image("mario-tiles", "assets/mario.png");
      
          this.load.image("tiles", "assets/Maze1Tiles.png");
          this.load.tilemapTiledJSON("map", "assets/tilemap2.json");
      
          // console.log(tilemap('map'));
      
      }
      
      let player;
      let cursors;
      
      function create() {
      
      
          // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in
          // Phaser's cache (i.e. the name you used in preload)
      
          const map = this.make.tilemap({
        key: "map",
        tileWidth: 36,
        tileHeight: 36
          });
      
          const tileset = map.addTilesetImage("Maze1Tiles", "tiles");
      
          // Parameters: layer name (or index) from Tiled, tileset, x, y
          const mainLayer = map.createStaticLayer("Tile Layer 1", tileset, 0, 0);
          // const worldLayer = map.createStaticLayer("World", tileset, 0, 0);
          // const aboveLayer = map.createStaticLayer("Above Player", tileset, 0, 0);
      
          mainLayer.setCollisionByProperty({
        collides: true
          });
      
          let score = 0;
          let scoreText;
      
          //     this.add.image(400, 300, 'sky');
          //     //or
          //     // this.add.image(0, 0, 'sky').setOrigin(0, 0)
          //     this.add.image(400, 300, 'star');
      
          //     //Load platform
          //     platforms = this.physics.add.staticGroup();
      
          //     platforms.create(400, 568, 'ground').setScale(2).refreshBody();
      
          //     platforms.create(600, 400, 'ground');
          //     platforms.create(50, 250, 'ground');
          //     platforms.create(750, 220, 'ground');
      
          //     //Load Player
          player = this.physics.add.sprite(50, 600, 'dude');
          this.physics.add.collider(player, mainLayer);
      
          //   //Player animations
          const anims = this.anims;
          anims.create({
        key: "misa-left-walk",
        frames: anims.generateFrameNames("atlas", {
            prefix: "misa-left-walk.",
            start: 0,
            end: 3,
            zeroPad: 3
        }),
        frameRate: 10,
        repeat: -1
          });
          anims.create({
        key: "misa-right-walk",
        frames: anims.generateFrameNames("atlas", {
            prefix: "misa-right-walk.",
            start: 0,
            end: 3,
            zeroPad: 3
        }),
        frameRate: 10,
        repeat: -1
          });
          anims.create({
        key: "misa-front-walk",
        frames: anims.generateFrameNames("atlas", {
            prefix: "misa-front-walk.",
            start: 0,
            end: 3,
            zeroPad: 3
        }),
        frameRate: 10,
        repeat: -1
          });
          anims.create({
        key: "misa-back-walk",
        frames: anims.generateFrameNames("atlas", {
            prefix: "misa-back-walk.",
            start: 0,
            end: 3,
            zeroPad: 3
        }),
        frameRate: 10,
        repeat: -1
          });
      
          //   //Enable keyboard movement
          //   cursors = this.input.keyboard.createCursorKeys();
          //   scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });
      
          bombs = this.physics.add.group();
      
          // this.physics.add.collider(bombs, platforms);
      
          this.physics.add.collider(player, bombs, hitBomb, null, this);
      
      }
      
      function hitBomb(player, bomb) {
          this.physics.pause();
      
          player.setTint(0xff0000);
      
          player.anims.play('turn');
      
          gameOver = true;
      }
      
      
      function update(time, delta) {
          // Stop any previous movement from the last frame
          cursors = this.input.keyboard.createCursorKeys();
          let speed = 175;
          let prevVelocity = player.body.velocity.clone();
      
          player.body.setVelocity(0);
      
          // Horizontal movement
          if (cursors.left.isDown) {
        player.body.setVelocityX(-100);
          } else if (cursors.right.isDown) {
        player.body.setVelocityX(100);
          }
      
          // Vertical movement
          if (cursors.up.isDown) {
        player.body.setVelocityY(-100);
          } else if (cursors.down.isDown) {
        player.body.setVelocityY(100);
          }
      
          // Normalize and scale the velocity so that player can't move faster along a diagonal
          player.body.velocity.normalize().scale(speed);
      
      }
    </script>
    <h1>hello</h1>
  </body>
</html>
